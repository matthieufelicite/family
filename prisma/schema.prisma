generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgresql"
    url      = env("FAMILY_DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    families      Family[]  @relation("UserFamilies")
    accounts      Account[]
    sessions      Session[]
    tasks         Task[]
    histories     History[]
}

model Family {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    users     User[]   @relation("UserFamilies")
    tasks     Task[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Task {
    id          String    @id @default(cuid())
    label       String
    description String?
    userId      String?
    familyId    String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
    family      Family?   @relation(fields: [familyId], references: [id], onDelete: Cascade)
    histories   History[]

    @@index([userId])
    @@index([familyId])
}

model History {
    id        String   @id @default(cuid())
    date      DateTime @default(now())
    taskId    String
    userId    String
    completed Boolean  @default(false)
    task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([taskId])
    @@index([userId, date])
}
